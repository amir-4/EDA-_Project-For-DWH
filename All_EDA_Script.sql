use DataWarehouseAnalytics ;

-- Retrieve a list of all tables in the database
SELECT
TABLE_CATALOG,
TABLE_SCHEMA,
TABLE_NAME,
TABLE_TYPE
FROM INFORMATION_SCHEMA.TABLES ;

-- Retrieve all columns for a specific table (dim_customers)
SELECT
COLUMN_NAME ,
DATA_TYPE,
IS_NULLABLE,
CHARACTER_MAXIMUM_LENGTH
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers' ;

SELECT
COLUMN_NAME ,
DATA_TYPE,
IS_NULLABLE,
CHARACTER_MAXIMUM_LENGTH
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_products' ;

SELECT
COLUMN_NAME ,
DATA_TYPE,
IS_NULLABLE,
CHARACTER_MAXIMUM_LENGTH
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'fact_sales' ;

-- Retrieve a list of unique countries from which customers originate
SELECT DISTINCT
country 
From gold.dim_customers
ORDER BY country ;

-- Retrieve a list of unique categories, subcategories, and products
SELECT DISTINCT
 category,
 subcategory,
 product_name
From gold.dim_products
ORDER BY category ,subcategory,product_name;


-- Determine the first and last order date and the total duration in months
SELECT 
MAX(order_date) as Last_one,
MIN(order_date) as  First_one ,
DATEDIFF(month , MIN(order_date) , MAX(order_date)) AS DURATION
FROM gold.fact_sales ;

-- Find the youngest and oldest customer based on birthdate
SELECT 
MAX(birthdate) as oldest_birthdate,
DATEDIFF(YEAR , MAX(birthdate) , GETDATE()) AS OLDEST_AGE,
MIN(birthdate) as Youngest_birthdate ,
DATEDIFF(YEAR , MIN(birthdate) , GETDATE()) AS Youngest_age
FROM gold.dim_customers ;

-- Find the Total Sales
SELECT
SUM(sales_amount) AS Total_Sales
FROM gold.fact_sales ;

-- Find how many items are sold
SELECT
Sum(quantity) AS total_sold_items
FROM gold.fact_sales ;

-- Find the average selling price
SELECT
AVG(price) AS average_selling_price
FROM gold.fact_sales ;

-- Find the Total number of Orders
SELECT
Count(Order_number) AS Total_number_of_Orders,
Count(DISTINCT Order_number) AS Total_unique_number_of_Orders
FROM gold.fact_sales ;

-- Find the total number of products
SELECT
Count( DISTINCT product_key) AS Total_number_of_products
FROM gold.dim_products;

-- Find the total number of customers
SELECT
Count(customer_key) AS Total_number_of_products
FROM gold.dim_customers;

-- Find the total number of customers that has placed an order
SELECT
Count(DISTINCT customer_key) AS Total_number_of_products
FROM gold.fact_sales;


-- Generate a Report that shows all key metrics of the business
SELECT 'TOTAL SALES' AS measure_name , SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total_Quantity' , SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Total_Orders' , COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'AVG price' , AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Products' , COUNT(DISTINCT Product_name) FROM gold.dim_products
UNION ALL
SELECT 'TOTAL CUSTOMER' , COUNT(customer_key) FROM gold.dim_customers

-- Find total customers by countries
SELECT 
country,
COUNT(customer_key) AS TOTAL_NUMBER
FROM gold.dim_customers
GROUP BY country

-- Find total customers by gender
SELECT 
gender,
COUNT(customer_key) AS TOTAL_NUMBER
FROM gold.dim_customers
GROUP BY gender

-- Find total products by category
SELECT
category,
SUM(product_key)
FROM gold.dim_products
GROUP BY category

-- What is the average costs in each category?
SELECT
category,
AVG(cost)
FROM gold.dim_products
GROUP BY category

-- What is the total revenue generated for each category?
SELECT
p.category,
SUM(f.sales_amount)
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.category

-- What is the total revenue generated by each customer?
SELECT
c.country,
SUM(f.quantity) AS S
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.country
ORDER BY S DESC

-- Which 5 products Generating the Highest Revenue?

SELECT TOP(5)
P.product_name,
SUM(f.sales_amount) AS S
FROM gold.fact_sales f
LEFT JOIN gold.dim_products P
ON f.product_key = P.product_key
GROUP BY P.product_name
ORDER BY S DESC

-- Which 5 products Generating the Highest Revenue?
SELECT TOP 5
p.product_name as Product_Name ,
SUM(f.sales_amount) AS Total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products P 
ON p.product_key = f.product_key
GROUP BY Product_Name
ORDER BY Total_revenue DESC ;

-- Complex but Flexibly Ranking Using Window Functions
SELECT * 
FROM(
SELECT 
p.product_name AS Product_Name,
SUM(f.sales_amount) AS Total_Revenue,
RANK() OVER(ORDER BY SUM(f.sales_amount) DESC) AS Rank_Products
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY Product_Name
) AS Rank_Products
WHERE Rank_Products <= 5;

-- Find the top 10 customers who have generated the highest revenue
SELECT *
FROM(
SELECT
c.customer_key as CUST_ID ,
c.country as CUST_CUNT ,
CONCAT(c.first_name , c.last_name) AS CUST_NAME,
SUM(f.sales_amount) AS TOTAL_REVENUE,
RANK()OVER(ORDER BY SUM(f.sales_amount) DESC) AS CUST_RANK 
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_key , c.first_name , c.last_name,c.country
) AS CUST_RANK
WHERE CUST_RANK <= 10 ;

-- The 3 customers with the fewest orders placed
SELECT TOP 3
c.customer_key AS CUST_KEY,
CONCAT(c.first_name , ' ' , c.last_name) AS CUST_NAME , 
c.country AS CUST_CUNT,
COUNT(DISTINCT f.due_date) as Total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_key , c.first_name , c.last_name , c.country
Order BY Total_orders ;

-- Analyse sales performance over time
SELECT 
YEAR(order_date) AS YEAR_DATE,
MONTH(order_date) AS MONTH_DATE,
SUM(sales_amount) AS TOTAL_REVENUE,
COUNT(DISTINCT customer_key) AS TOTAL_CUST,
SUM(quantity) AS Quantity
FROM gold.fact_sales
GROUP BY YEAR(order_date) , MONTH(order_date)
ORDER BY YEAR(order_date) , MONTH(order_date)

-- DATETRUNC()
SELECT
DATETRUNC(MONTH , order_date) AS DATE,
SUM(sales_amount) AS TOTAL_REVENUE,
COUNT(DISTINCT customer_key) AS TOTAL_CUST,
SUM(quantity) AS Quantity
FROM gold.fact_sales
GROUP BY DATETRUNC(MONTH , order_date)
ORDER BY DATETRUNC(MONTH , order_date)

/* Analyze the yearly performance of products by comparing their sales 
to both the average sales performance of the product and the previous year's sales */
WITH yearly_product_sales AS (
    SELECT
        YEAR(f.order_date) AS order_year,
        p.product_name,
        SUM(f.sales_amount) AS current_sales
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p
        ON f.product_key = p.product_key
    WHERE f.order_date IS NOT NULL
    GROUP BY 
        YEAR(f.order_date),
        p.product_name
)
SELECT
    order_year,
    product_name,
    current_sales,
    AVG(current_sales) OVER (PARTITION BY product_name) AS avg_sales,
    current_sales - AVG(current_sales) OVER (PARTITION BY product_name) AS diff_avg,
    CASE 
        WHEN current_sales - AVG(current_sales) OVER (PARTITION BY product_name) > 0 THEN 'Above Avg'
        WHEN current_sales - AVG(current_sales) OVER (PARTITION BY product_name) < 0 THEN 'Below Avg'
        ELSE 'Avg'
    END AS avg_change,
    -- Year-over-Year Analysis
    LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS py_sales,
    current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS diff_py,
    CASE 
        WHEN current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) > 0 THEN 'Increase'
        WHEN current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) < 0 THEN 'Decrease'
        ELSE 'No Change'
    END AS py_change
FROM yearly_product_sales
ORDER BY product_name, order_year;

/*Segment products into cost ranges and 
count how many products fall into each segment*/

WITH PRODUCT_SEGMENT AS (
	SELECT
	product_key,
	product_line,
	product_name,
	cost,
	CASE	
		WHEN COST < 100 THEN 'BELOW 100'
		WHEN COST BETWEEN 100 AND 500 THEN '100-500'
		WHEN COST BETWEEN 500 AND 1000 THEN '500-1000'
		ELSE 'ABOVE 1000'
	END Cost_Range
	FROM gold.dim_products
)

SELECT 
product_line,
Cost_Range , 
Count(DISTINCT product_key) AS Total_Product
FROM PRODUCT_SEGMENT
GROUP BY Cost_Range , product_line
ORDER BY Total_Product DESC

/*Group customers into three segments based on their spending behavior:
	- VIP: Customers with at least 12 months of history and spending more than €5,000.
	- Regular: Customers with at least 12 months of history but spending €5,000 or less.
	- New: Customers with a lifespan less than 12 months.
And find the total number of customers by each group
*/
WITH Customer_Segments AS (
SELECT
c.customer_key ,
SUM(f.sales_amount) AS Total_Sales,
Max(f.order_date) AS Last_Order,
Min(f.order_date) AS First_Order,
DATEDIFF(MONTH , Min(f.order_date) , Max(f.order_date)) AS lifeTime
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_key 
)

SELECT 
Slicing,
COUNT(customer_key) AS Total_Cust
FROM
(
SELECT
customer_key ,
	CASE 
		WHEN lifeTime >= 12 AND Total_Sales > 5000 THEN 'VIP'
		WHEN lifeTime >= 12 AND Total_Sales <= 5000 THEN 'Regular'
		ELSE 'New'
	END AS Slicing
FROM Customer_Segments
) AS Segments
Group by Slicing
ORDER BY Total_Cust DESC ;


-- Create  A view For All Customer Table

IF OBJECT_ID('gold.report_customers', 'V') IS NOT NULL
    DROP VIEW gold.report_customers;
GO

CREATE VIEW gold.report_customers AS

WITH base_query AS (
    SELECT
        f.order_number,
        f.product_key,
        f.order_date,
        f.sales_amount,
        f.quantity,
        c.customer_key,
        c.customer_number,
        CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
        DATEDIFF(year, c.birthdate, GETDATE()) AS age
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_customers c
        ON c.customer_key = f.customer_key
    WHERE f.order_date IS NOT NULL
),

customer_aggregation AS (
    SELECT 
        customer_key,
        customer_number,
        customer_name,
        age,
        COUNT(DISTINCT order_number) AS total_orders,
        SUM(sales_amount) AS total_sales,
        SUM(quantity) AS total_quantity,
        COUNT(DISTINCT product_key) AS total_products,
        MAX(order_date) AS last_order_date,
        DATEDIFF(month, MIN(order_date), MAX(order_date)) AS lifespan
    FROM base_query
    GROUP BY 
        customer_key,
        customer_number,
        customer_name,
        age
)

SELECT
    customer_key,
    customer_number,
    customer_name,
    age,
    CASE 
         WHEN age < 20 THEN 'Under 20'
         WHEN age BETWEEN 20 AND 29 THEN '20-29'
         WHEN age BETWEEN 30 AND 39 THEN '30-39'
         WHEN age BETWEEN 40 AND 49 THEN '40-49'
         ELSE '50 and above'
    END AS age_group,
    CASE 
        WHEN lifespan >= 12 AND total_sales > 5000 THEN 'VIP'
        WHEN lifespan >= 12 AND total_sales <= 5000 THEN 'Regular'
        ELSE 'New'
    END AS customer_segment,
    last_order_date,
    DATEDIFF(month, last_order_date, GETDATE()) AS recency,
    total_orders,
    total_sales,
    total_quantity,
    total_products,
    lifespan,
    CASE 
        WHEN total_orders = 0 THEN 0
        ELSE total_sales / total_orders
    END AS avg_order_value,
    CASE 
        WHEN lifespan = 0 THEN total_sales
        ELSE total_sales / lifespan
    END AS avg_monthly_spend
FROM customer_aggregation;


SELECT *
FROM gold.report_customers;
